<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Collections.NET</name>
    </assembly>
    <members>
        <member name="M:System.Collections.Generic.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds the elements of the specified <see cref="T:System.Collections.Generic.IEnumerable`1" /> to the collection
            </summary>
            <typeparam name="T">The type of the elements of the collection</typeparam>
            <param name="collection">The collection to add the items to.</param>
            <param name="items">
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements should be added to the end of the collection. The
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> itself cannot be null, but it can contain elements that are null, if type T is a
                reference type.
            </param>
            <exception cref="T:System.ArgumentNullException">collection is null</exception>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.Range``1(System.Collections.Generic.ICollection{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Returns the range of elements from the specified start and end index of a collection.
            </summary>
            <typeparam name="T">The type of the elements of collection.</typeparam>
            <param name="collection">The collection.</param>
            <param name="start">
                The inclusive start index of the range. If <c>null</c>, then this will default to zero.
            </param>
            <param name="end">
                The exclusive end index of the range. If <c>null</c>, then this will default to the number of elements
                in the collection.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the elements from the specified range.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the collection is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Updates the value of a key in the dictionary, if it exists. If the key does not exist,
                it is added to the dictionary with the specified value.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key to locate in the dictionary.</param>
            <param name="value">The value to update or add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the dictionary is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1}[])">
            <summary>
                Adds multiple values to the dictionary. If any key exists, the value is updated.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="kvps">
                One or more key value pairs containing the values to add or update.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the <paramref name="dictionary"/> or <paramref name="kvps"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Gets the value for the specified key in a dictionary. If the key does not exist, the
                <paramref name="defaultValue"/> value is returned.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key to locate in the dictionary.</param>
            <param name="defaultValue">The value to return if the key does not exist.</param>
            <returns>
                The value corresponding to the specified key; otherwise the
                <paramref name="defaultValue"/> value.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the dictionary is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
                Gets the value for the specified key in a dictionary. If the key does not exist, the
                <paramref name="defaultValue"/> value is returned.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key to locate in the dictionary.</param>
            <param name="defaultValue">The value to return if the key does not exist.</param>
            <returns>
                The value corresponding to the specified key; otherwise the
                <paramref name="defaultValue"/> value.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the dictionary is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.GetValueOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Gets the value associated with the specified key. If the key does not exist, the
                <paramref name="value"/> value is added to the dictionary with the specified key and
                returned.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key to locate in the dictionary.</param>
            <param name="value">The value to add if the key does does exist.</param>
            <returns>The value assciated with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the dictionary is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.GetValueOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
                Gets the value associated with the specified key. If the key does not exist, a new value
                is generated using the the <paramref name="valueGetter"/> delegate and is added to the
                dictionary.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key to locate in the dictionary.</param>
            <param name="valueGetter">The delegate used to generate a new value.</param>
            <returns>The value assciated with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the dictionary or delegate is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.GetValueOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,System.Collections.Generic.IDictionary{``0,``1},``1})">
            <summary>
                Gets the value associated with the specified key. If the key does not exist, a new value
                is generated using the the <paramref name="valueGetter"/> delegate and is added to the
                dictionary.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key to locate in the dictionary.</param>
            <param name="valueGetter">The delegate used to generate a new value.</param>
            <returns>The value assciated with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the dictionary or delegate is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.AllOrNone``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Determines whether all or none of the elements in a <paramref name="sequence"/> match
                the specified <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The type of the elements of sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="predicate">The <paramref name="predicate"/> to check against.</param>
            <returns>
                <c>true</c>, if all or none of the elements in the sequence match the predicate. If some
                elements match and others do not, then <c>false</c> is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown of the <paramref name="sequence"/> or <paramref name="predicate"/> is
                <c>null</c>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Performs an <paramref name="action"/> on all elements of a <paramref name="sequence"/>.
            </summary>
            <typeparam name="T">The type of the elements of sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="action">The action to perform.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown of the <paramref name="action"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
                Performs an <paramref name="action"/> on all elements of a <paramref name="sequence"/>.
            </summary>
            <typeparam name="T">The type of the elements of sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="action">The action to perform.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown of the <paramref name="action"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Indicates whether the specified sequence is empty.
            </summary>
            <typeparam name="T">The type of the elements of the sequence</typeparam>
            <param name="sequence">The sequence.</param>
            <returns><c>true</c> if the sequence is empty; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the source sequence is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Indicates whether the specified <paramref name="sequence"/> is not <c>null</c> and has
                at least one element.
            </summary>
            <typeparam name="T">The type of the elements of the sequence</typeparam>
            <param name="sequence">The sequence.</param>
            <returns><c>true</c>, if the sequence if not <c>null</c> and has elements.</returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Indicates whether the specified sequence is null or does not contain any elements.
            </summary>
            <typeparam name="T">The type of the elements of the sequence</typeparam>
            <param name="sequence"> The sequence to test. </param>
            <returns>
                <c>true</c> if the sequence is either null or empty; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Determines whether none of the elements of the <paramref name="sequence"/> satisfies the
                specified <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The type of the elements of sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="predicate">The <paramref name="predicate"/> to check against.</param>
            <returns>
                <c>true</c> if none of the elements in the <paramref name="sequence"/> satisfy the
                <paramref name="predicate"/>; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the <paramref name="sequence"/> or <paramref name="predicate"/> is
                <c>null</c>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Checks each element of the <paramref name="sequence"/> against the specified
                <paramref name="predicate"/> and returns the elements that match and those that do not
                match.
            </summary>
            <typeparam name="T">The type of the elements of sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="predicate">The <paramref name="predicate"/> to check against.</param>
            <returns>
                Two collections sequences - one with the elements that match the
                <paramref name="predicate"/> and another with elements that do not match.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the <paramref name="sequence"/> or <paramref name="predicate"/> is
                <c>null</c>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.Repeat``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Repeats the <paramref name="sequence"/> <paramref name="count"/> number of times.
            </summary>
            <typeparam name="T">The type of the elements of sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="count">The number of times to repeat the sequence.</param>
            <returns>The <paramref name="sequence"/> repeated <paramref name="count"/> number of times.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the <paramref name="sequence"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown of the <paramref name="count"/> is less than one.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Returns a shuffled version of the <paramref name="sequence"/>.
            </summary>
            <typeparam name="T">The type of the elements of sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="iterations">The number of times to repeat the shuffle operation.</param>
            <returns>A shuffled version of the <paramref name="sequence"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the <paramref name="sequence"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if the <paramref name="iterations"/> is less than one.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})">
            <summary>
                Converts selected elements of the specified sequence to an array of another type.
            </summary>
            <typeparam name="TInput">The type of elements in the source sequence.</typeparam>
            <typeparam name="TOutput">The type of elements in the target array.</typeparam>
            <param name="sequence">The source sequence.</param>
            <param name="predicate">
                A delegate that controls the elements that are included in the target array.
            </param>
            <param name="converter">
                A delegate that converts elements from the source sequence type to the target array
                element type.
            </param>
            <returns>An array of the target element type.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the source sequence, <c>predicate</c> delegate or <c>converter</c> delegate are null.
            </exception>
        </member>
        <member name="T:System.Collections.Generic.EnumIterator">
            <summary>
                Provides iterators for enum types. Can be used in a LINQ expression.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumIterator.For``1">
            <summary>
                Generates an iterator for the enum type specified by the TEnum generic parameter.
            </summary>
            <typeparam name="TEnum">The enum type to generate the iterator for</typeparam>
            <returns>An generic iterator that can iterate over the values of TEnum</returns>
        </member>
        <member name="M:System.Collections.Generic.EnumIterator.For(System.Type)">
            <summary>
                Generates an iterator for the enum type specified by the TEnum generic parameter.
            </summary>
            <param name="enumType">The enum type to generate the iterator for</param>
            <returns>A non-generic iterator that can iterate over the values of the enum</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the specified type is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when the specified type is not an enum</exception>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.Fill``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                Populates each item in a <paramref name="list"/> with a specific <paramref name="value"/>.
            </summary>
            <typeparam name="T">The type of the elements of the list</typeparam>
            <param name="list">The collection to be populated.</param>
            <param name="value">The value with which to populate the collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="list"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.Fill``1(System.Collections.Generic.IList{``0},System.Func{System.Int32,``0})">
            <summary>
                Populates each item in a <paramref name="list"/> with the values from a <paramref name="generator"/>
                delegate.
            </summary>
            <typeparam name="T">The type of the elements of the list</typeparam>
            <param name="list">The collection to be populated.</param>
            <param name="generator">The delegate to generate the values for each item.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="list"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the index of the first element in a <paramref name="list"/> that matches the specified
                <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The type of the elements of list.</typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The <paramref name="predicate"/> to check against.</param>
            <returns>The index of the element, if found; otherwise -1.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="list"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="predicate"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.IndexOfAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns all indices of elements in a <paramref name="list"/> that match the specified
                <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The type of the elements of list.</typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The <paramref name="predicate"/> to check against.</param>
            <returns>
                A sequence of indices of the matches elements in the list, if any are found; otherwise -1.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="list"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="predicate"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.LastIndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the index of the last element in a <paramref name="list"/> that matches the specified
                <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The type of the elements of list.</typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The <paramref name="predicate"/> to check against.</param>
            <returns>The index of the element, if found; otherwise -1.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="list"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="predicate"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
                Removes all elements from the <paramref name="list"/> that satisfy the specified
                <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The type of the elements of list.</typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate delegate to check against.</param>
            <returns>The number of elements removed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="list"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="predicate"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.RemoveFirst``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
                Removes the first element from the <paramref name="list"/> that satisfies the specified
                <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The type of the elements of list.</typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate delegate to check against.</param>
            <returns><c>true</c> if an element was found and removed; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="list"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="predicate"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.RemoveLast``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
                Removes the last element from the <paramref name="list"/> that satisfies the specified
                <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The type of the elements of list.</typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate delegate to check against.</param>
            <returns><c>true</c> if an element was found and removed; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="list"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="predicate"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.ShuffleInplace``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                Shuffles the elements of the <paramref name="list"/>.
            </summary>
            <typeparam name="T">The type of the elements of list.</typeparam>
            <param name="list">The list.</param>
            <param name="iterations">The number of times to repeat the shuffle operation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="list"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="iterations"/> is less than one.</exception>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.SlidingChunk``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                Returns overlapping chunks of the specified <paramref name="chunkSize"/>.
            </summary>
            <typeparam name="T">The type of the elements of list.</typeparam>
            <param name="list">The list.</param>
            <param name="chunkSize">The size of the chunks.</param>
            <returns>Collection of overlapping chunks.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="list"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="chunkSize"/> is less than one.
            </exception>
        </member>
        <member name="T:System.Collections.Generic.ByteCollectionExtensions">
            <summary>
                Set of utility extension methods for byte arrays and collections.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ByteCollectionExtensions.IsEqualTo(System.Collections.Generic.IList{System.Byte},System.Collections.Generic.IList{System.Byte})">
            <summary>
                Checks whether two byte collections are equal based on their content.
            </summary>
            <param name="bytes">The source byte collection to check.</param>
            <param name="other">The second byte collection to check.</param>
            <returns><c>true</c> if the contents of the two byte collections are equal.</returns>
        </member>
        <member name="M:System.Collections.Generic.ByteCollectionExtensions.IsEqualTo(System.Collections.Generic.IList{System.Byte},System.Byte[])">
            <summary>
                Checks whether two byte collections are equal based on their content.
            </summary>
            <param name="bytes">The source byte collection to check.</param>
            <param name="other">The second byte collection to check.</param>
            <returns><c>true</c> if the contents of the two byte collection are equal.</returns>
        </member>
        <member name="M:System.Collections.Generic.ByteCollectionExtensions.IsNullOrZeroed(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
                Indicates whether the specified byte collection is <c>null</c>, does not contain any elements or consists
                of only zero value items.
            </summary>
            <param name="bytes">The byte collection to test.</param>
            <returns>
                <c>true</c> if the byte collection is <c>null</c>, does not contain any elements or consists exclusively
                of zero value items.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ByteCollectionExtensions.IsZeroed(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
                Indicates whether the specified byte collection does not contain any elements or consists of only zero
                value items.
            </summary>
            <param name="bytes">The byte collection to test.</param>
            <returns>
                <c>true</c> if the byte collection is <c>null</c>, does not contain any elements or consists exclusively
                of zero value items.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the byte collection is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.ByteCollectionExtensions.ToString(System.Collections.Generic.IList{System.Byte},System.String)">
            <summary>
                Creates a <see cref="T:System.String"/> from a byte collection that concatenates each item in the collection,
                separated by the specified delimiter.
            </summary>
            <param name="source">The byte collection from which to create the string.</param>
            <param name="delimiter">The optional delimiter to separate each item in the collection.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:System.Collections.Generic.ByteCollectionExtensions.GetNumbersUptoSequence(System.Byte[],System.Int32,System.Byte[])">
            <summary>
                Retrieves the bytes from a byte array upto a specific sequence.
            </summary>
            <param name="source">The byte array.</param>
            <param name="start">The index in the array to start searching.</param>
            <param name="sequence">The sequence to search for.</param>
            <returns>An array of bytes from the starting index to the matching sequence.</returns>
        </member>
        <member name="T:System.Collections.Generic.CharCollectionExtensions">
            <summary>
                Set of utility extension methods for char arrays and collections.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.CharCollectionExtensions.IsEqualTo(System.Collections.Generic.IList{System.Char},System.Collections.Generic.IList{System.Char})">
            <summary>
                Checks whether two char collections are equal based on their content.
            </summary>
            <param name="chars">The source char collection to check.</param>
            <param name="other">The second char collection to check.</param>
            <returns><c>true</c> if the contents of the two char collections are equal.</returns>
        </member>
        <member name="M:System.Collections.Generic.CharCollectionExtensions.IsEqualTo(System.Collections.Generic.IList{System.Char},System.Char[])">
            <summary>
                Checks whether two char collections are equal based on their content.
            </summary>
            <param name="chars">The source char collection to check.</param>
            <param name="other">The second char collection to check.</param>
            <returns><c>true</c> if the contents of the two char collection are equal.</returns>
        </member>
        <member name="M:System.Collections.Generic.CharCollectionExtensions.IsNullOrZeroed(System.Collections.Generic.ICollection{System.Char})">
            <summary>
                Indicates whether the specified char collection is <c>null</c>, does not contain any elements or consists
                of only zero value items.
            </summary>
            <param name="chars">The char collection to test.</param>
            <returns>
                <c>true</c> if the char collection is <c>null</c>, does not contain any elements or consists exclusively
                of zero value items.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.CharCollectionExtensions.IsZeroed(System.Collections.Generic.ICollection{System.Char})">
            <summary>
                Indicates whether the specified char collection does not contain any elements or consists of only zero
                value items.
            </summary>
            <param name="chars">The char collection to test.</param>
            <returns>
                <c>true</c> if the char collection is <c>null</c>, does not contain any elements or consists exclusively
                of zero value items.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the char collection is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.CharCollectionExtensions.ToString(System.Collections.Generic.IList{System.Char},System.String)">
            <summary>
                Creates a <see cref="T:System.String"/> from a char collection that concatenates each item in the collection,
                separated by the specified delimiter.
            </summary>
            <param name="source">The char collection from which to create the string.</param>
            <param name="delimiter">The optional delimiter to separate each item in the collection.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:System.Collections.Generic.CharCollectionExtensions.GetNumbersUptoSequence(System.Char[],System.Int32,System.Char[])">
            <summary>
                Retrieves the chars from a char array upto a specific sequence.
            </summary>
            <param name="source">The char array.</param>
            <param name="start">The index in the array to start searching.</param>
            <param name="sequence">The sequence to search for.</param>
            <returns>An array of chars from the starting index to the matching sequence.</returns>
        </member>
        <member name="T:System.Collections.Generic.IntCollectionExtensions">
            <summary>
                Set of utility extension methods for int arrays and collections.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IntCollectionExtensions.IsEqualTo(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
                Checks whether two int collections are equal based on their content.
            </summary>
            <param name="ints">The source int collection to check.</param>
            <param name="other">The second int collection to check.</param>
            <returns><c>true</c> if the contents of the two int collections are equal.</returns>
        </member>
        <member name="M:System.Collections.Generic.IntCollectionExtensions.IsEqualTo(System.Collections.Generic.IList{System.Int32},System.Int32[])">
            <summary>
                Checks whether two int collections are equal based on their content.
            </summary>
            <param name="ints">The source int collection to check.</param>
            <param name="other">The second int collection to check.</param>
            <returns><c>true</c> if the contents of the two int collection are equal.</returns>
        </member>
        <member name="M:System.Collections.Generic.IntCollectionExtensions.IsNullOrZeroed(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Indicates whether the specified int collection is <c>null</c>, does not contain any elements or consists
                of only zero value items.
            </summary>
            <param name="ints">The int collection to test.</param>
            <returns>
                <c>true</c> if the int collection is <c>null</c>, does not contain any elements or consists exclusively
                of zero value items.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.IntCollectionExtensions.IsZeroed(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Indicates whether the specified int collection does not contain any elements or consists of only zero
                value items.
            </summary>
            <param name="ints">The int collection to test.</param>
            <returns>
                <c>true</c> if the int collection is <c>null</c>, does not contain any elements or consists exclusively
                of zero value items.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the int collection is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.IntCollectionExtensions.ToString(System.Collections.Generic.IList{System.Int32},System.String)">
            <summary>
                Creates a <see cref="T:System.String"/> from a int collection that concatenates each item in the collection,
                separated by the specified delimiter.
            </summary>
            <param name="source">The int collection from which to create the string.</param>
            <param name="delimiter">The optional delimiter to separate each item in the collection.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:System.Collections.Generic.IntCollectionExtensions.GetNumbersUptoSequence(System.Int32[],System.Int32,System.Int32[])">
            <summary>
                Retrieves the ints from a int array upto a specific sequence.
            </summary>
            <param name="source">The int array.</param>
            <param name="start">The index in the array to start searching.</param>
            <param name="sequence">The sequence to search for.</param>
            <returns>An array of ints from the starting index to the matching sequence.</returns>
        </member>
        <member name="T:System.Collections.Generic.LongCollectionExtensions">
            <summary>
                Set of utility extension methods for long arrays and collections.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LongCollectionExtensions.IsEqualTo(System.Collections.Generic.IList{System.Int64},System.Collections.Generic.IList{System.Int64})">
            <summary>
                Checks whether two long collections are equal based on their content.
            </summary>
            <param name="longs">The source long collection to check.</param>
            <param name="other">The second long collection to check.</param>
            <returns><c>true</c> if the contents of the two long collections are equal.</returns>
        </member>
        <member name="M:System.Collections.Generic.LongCollectionExtensions.IsEqualTo(System.Collections.Generic.IList{System.Int64},System.Int64[])">
            <summary>
                Checks whether two long collections are equal based on their content.
            </summary>
            <param name="longs">The source long collection to check.</param>
            <param name="other">The second long collection to check.</param>
            <returns><c>true</c> if the contents of the two long collection are equal.</returns>
        </member>
        <member name="M:System.Collections.Generic.LongCollectionExtensions.IsNullOrZeroed(System.Collections.Generic.ICollection{System.Int64})">
            <summary>
                Indicates whether the specified long collection is <c>null</c>, does not contain any elements or consists
                of only zero value items.
            </summary>
            <param name="longs">The long collection to test.</param>
            <returns>
                <c>true</c> if the long collection is <c>null</c>, does not contain any elements or consists exclusively
                of zero value items.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.LongCollectionExtensions.IsZeroed(System.Collections.Generic.ICollection{System.Int64})">
            <summary>
                Indicates whether the specified long collection does not contain any elements or consists of only zero
                value items.
            </summary>
            <param name="longs">The long collection to test.</param>
            <returns>
                <c>true</c> if the long collection is <c>null</c>, does not contain any elements or consists exclusively
                of zero value items.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the long collection is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.LongCollectionExtensions.ToString(System.Collections.Generic.IList{System.Int64},System.String)">
            <summary>
                Creates a <see cref="T:System.String"/> from a long collection that concatenates each item in the collection,
                separated by the specified delimiter.
            </summary>
            <param name="source">The long collection from which to create the string.</param>
            <param name="delimiter">The optional delimiter to separate each item in the collection.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:System.Collections.Generic.LongCollectionExtensions.GetNumbersUptoSequence(System.Int64[],System.Int32,System.Int64[])">
            <summary>
                Retrieves the longs from a long array upto a specific sequence.
            </summary>
            <param name="source">The long array.</param>
            <param name="start">The index in the array to start searching.</param>
            <param name="sequence">The sequence to search for.</param>
            <returns>An array of longs from the starting index to the matching sequence.</returns>
        </member>
        <member name="T:System.Collections.Generic.ShortCollectionExtensions">
            <summary>
                Set of utility extension methods for short arrays and collections.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ShortCollectionExtensions.IsEqualTo(System.Collections.Generic.IList{System.Int16},System.Collections.Generic.IList{System.Int16})">
            <summary>
                Checks whether two short collections are equal based on their content.
            </summary>
            <param name="shorts">The source short collection to check.</param>
            <param name="other">The second short collection to check.</param>
            <returns><c>true</c> if the contents of the two short collections are equal.</returns>
        </member>
        <member name="M:System.Collections.Generic.ShortCollectionExtensions.IsEqualTo(System.Collections.Generic.IList{System.Int16},System.Int16[])">
            <summary>
                Checks whether two short collections are equal based on their content.
            </summary>
            <param name="shorts">The source short collection to check.</param>
            <param name="other">The second short collection to check.</param>
            <returns><c>true</c> if the contents of the two short collection are equal.</returns>
        </member>
        <member name="M:System.Collections.Generic.ShortCollectionExtensions.IsNullOrZeroed(System.Collections.Generic.ICollection{System.Int16})">
            <summary>
                Indicates whether the specified short collection is <c>null</c>, does not contain any elements or consists
                of only zero value items.
            </summary>
            <param name="shorts">The short collection to test.</param>
            <returns>
                <c>true</c> if the short collection is <c>null</c>, does not contain any elements or consists exclusively
                of zero value items.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ShortCollectionExtensions.IsZeroed(System.Collections.Generic.ICollection{System.Int16})">
            <summary>
                Indicates whether the specified short collection does not contain any elements or consists of only zero
                value items.
            </summary>
            <param name="shorts">The short collection to test.</param>
            <returns>
                <c>true</c> if the short collection is <c>null</c>, does not contain any elements or consists exclusively
                of zero value items.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the short collection is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.ShortCollectionExtensions.ToString(System.Collections.Generic.IList{System.Int16},System.String)">
            <summary>
                Creates a <see cref="T:System.String"/> from a short collection that concatenates each item in the collection,
                separated by the specified delimiter.
            </summary>
            <param name="source">The short collection from which to create the string.</param>
            <param name="delimiter">The optional delimiter to separate each item in the collection.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:System.Collections.Generic.ShortCollectionExtensions.GetNumbersUptoSequence(System.Int16[],System.Int32,System.Int16[])">
            <summary>
                Retrieves the shorts from a short array upto a specific sequence.
            </summary>
            <param name="source">The short array.</param>
            <param name="start">The index in the array to start searching.</param>
            <param name="sequence">The sequence to search for.</param>
            <returns>An array of shorts from the starting index to the matching sequence.</returns>
        </member>
        <member name="M:System.Collections.Generic.ObjectExtensions.ParentChain``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
                Given a self-referencing object, this method traverses up the parent chain until the
                oldest parent is reached or the specified <paramref name="stopCondition"/> is met.
            </summary>
            <typeparam name="T">Type of the self-referencing object.</typeparam>
            <param name="start">The object to start traversing from.</param>
            <param name="parentSelector">
                Delegate that accepts an instance of <typeparamref name="T"/> and returns it's parent
                instance.
            </param>
            <param name="stopCondition">Optional predicate to stop the traversal.</param>
            <param name="skipStart">
                If <c>true</c>, skips the <paramref name="start"/> instance during traversal.
            </param>
            <returns>The sequence of instances traversed.</returns>
        </member>
        <member name="T:System.Collections.Generic.PartitionSequence`1">
            <summary>
                Represents the results of a predicate check on all items of a collection.
            </summary>
            <typeparam name="T">The type of element in the collection.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.PartitionSequence`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Initializes an instance of the <see cref="T:System.Collections.Generic.PartitionSequence`1"/> class.
            </summary>
            <param name="matches">The matching elements.</param>
            <param name="mismatches">The elements that do not match.</param>
        </member>
        <member name="P:System.Collections.Generic.PartitionSequence`1.Matches">
            <summary>
                Collection of all items in the collection that satisfy the predicate.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PartitionSequence`1.Mismatches">
            <summary>
                Collection of all items in the collection that do not satisfy the predicate.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.Rng">
            <summary>
                Consolidated random number generator that uses <see cref="T:System.Random"/> for netstandard 1.3 and
                <c>RNGCryptoServiceProvider</c> for all other targets.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Rng._max">
            <summary>
                Exclusive max value of the generated random number.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Rng.#ctor(System.Int32)">
            <summary>
                Initializes an instance of the <see cref="T:System.Collections.Generic.Rng"/> class with the exclusive <paramref name="max"/> value
                to generate.
            </summary>
            <param name="max">Exclusive max value of the generated random number.</param>
        </member>
        <member name="M:System.Collections.Generic.Rng.Next">
            <summary>
                Generates a random number from 0 to <see cref="F:System.Collections.Generic.Rng._max"/>
            </summary>
            <returns>The random number.</returns>
        </member>
    </members>
</doc>
